/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift;

import (
        "thrift"
        "fmt"
)



/**
 * Attributes:
 *  - Code
 *  - Description
 */
type CrucException struct {
  thrift.TStruct
  Code int32 "code"; // 1
  Description string "description"; // 2
}

func NewCrucException() *CrucException {
  output := &CrucException{
    TStruct:thrift.NewTStruct("CrucException", []thrift.TField{
    thrift.NewTField("code", thrift.I32, 1),
    thrift.NewTField("description", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *CrucException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "code" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "description" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CrucException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadI32()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "code", p.ThriftName(), err1); }
  p.Code = v0
  return err
}

func (p *CrucException) ReadFieldCode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CrucException) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadString()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "description", p.ThriftName(), err3); }
  p.Description = v2
  return err
}

func (p *CrucException) ReadFieldDescription(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CrucException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CrucException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CrucException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("code", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "code", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Code))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "code", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "code", p.ThriftName(), err); }
  return err
}

func (p *CrucException) WriteFieldCode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CrucException) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("description", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Description))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  return err
}

func (p *CrucException) WriteFieldDescription(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CrucException) TStructName() string {
  return "CrucException"
}

func (p *CrucException) ThriftName() string {
  return "CrucException"
}

func (p *CrucException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CrucException(%+v)", *p)
}

func (p *CrucException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CrucException)
  if !ok {
    return 0, false
  }
  if p.Code != data.Code {
    if p.Code < data.Code {
      return -1, true
    }
    return 1, true
  }
  if p.Description != data.Description {
    if p.Description < data.Description {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CrucException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Code
  case 2: return p.Description
  }
  return nil
}

func (p *CrucException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("code", thrift.I32, 1),
    thrift.NewTField("description", thrift.STRING, 2),
    })
}

func init() {
}

