/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type ICrucService interface {
  /**
   * Parameters:
   *  - Cmd
   */
  Ping(cmd string) (retval4 string, ex *CrucException, err os.Error)
  /**
   * Parameters:
   *  - InterfaceName
   *  - Params
   */
  Call(interfaceName string, params thrift.TList) (retval5 string, ex *CrucException, err os.Error)
}

type CrucServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewCrucServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CrucServiceClient {
  return &CrucServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewCrucServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CrucServiceClient {
  return &CrucServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Parameters:
 *  - Cmd
 */
func (p *CrucServiceClient) Ping(cmd string) (retval6 string, ex *CrucException, err os.Error) {
  err = p.SendPing(cmd)
  if err != nil { return }
  return p.RecvPing()
}

func (p *CrucServiceClient) SendPing(cmd string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId)
  args7 := NewPingArgs()
  args7.Cmd = cmd
  err = args7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CrucServiceClient) RecvPing() (value string, ex *CrucException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error9 := thrift.NewTApplicationExceptionDefault()
    error10, err := error9.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error10
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result8 := NewPingResult()
  err = result8.Read(iprot)
  iprot.ReadMessageEnd()
  value = result8.Success
  if result8.Ex != nil {
    ex = result8.Ex
  }
  return
}

/**
 * Parameters:
 *  - InterfaceName
 *  - Params
 */
func (p *CrucServiceClient) Call(interfaceName string, params thrift.TList) (retval11 string, ex *CrucException, err os.Error) {
  err = p.SendCall(interfaceName, params)
  if err != nil { return }
  return p.RecvCall()
}

func (p *CrucServiceClient) SendCall(interfaceName string, params thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("call", thrift.CALL, p.SeqId)
  args12 := NewCallArgs()
  args12.InterfaceName = interfaceName
  args12.Params = params
  err = args12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CrucServiceClient) RecvCall() (value string, ex *CrucException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationExceptionDefault()
    error15, err := error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result13 := NewCallResult()
  err = result13.Read(iprot)
  iprot.ReadMessageEnd()
  value = result13.Success
  if result13.Ex != nil {
    ex = result13.Ex
  }
  return
}


type CrucServiceProcessor struct {
  handler ICrucService
  processorMap map[string]thrift.TProcessorFunction
}

func (p *CrucServiceProcessor) Handler() ICrucService {
  return p.handler
}

func (p *CrucServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CrucServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *CrucServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCrucServiceProcessor(handler ICrucService) *CrucServiceProcessor {

  self16 := &CrucServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["ping"] = &crucServiceProcessorPing{handler:handler}
  self16.processorMap["call"] = &crucServiceProcessorCall{handler:handler}
return self16
}

func (p *CrucServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x17.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x17
  }
  return process.Process(seqId, iprot, oprot)
}

type crucServiceProcessorPing struct {
  handler ICrucService
}

func (p *crucServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPingArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPingResult()
  if result.Success, result.Ex, err = p.handler.Ping(args.Cmd); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err.String())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type crucServiceProcessorCall struct {
  handler ICrucService
}

func (p *crucServiceProcessorCall) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCallArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("call", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCallResult()
  if result.Success, result.Ex, err = p.handler.Call(args.InterfaceName, args.Params); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing call: " + err.String())
    oprot.WriteMessageBegin("call", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("call", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Cmd
 */
type PingArgs struct {
  thrift.TStruct
  Cmd string "cmd"; // 1
}

func NewPingArgs() *PingArgs {
  output := &PingArgs{
    TStruct:thrift.NewTStruct("ping_args", []thrift.TField{
    thrift.NewTField("cmd", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *PingArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "cmd" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PingArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v18, err19 := iprot.ReadString()
  if err19 != nil { return thrift.NewTProtocolExceptionReadField(1, "cmd", p.ThriftName(), err19); }
  p.Cmd = v18
  return err
}

func (p *PingArgs) ReadFieldCmd(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PingArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ping_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PingArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cmd", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmd", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Cmd))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmd", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmd", p.ThriftName(), err); }
  return err
}

func (p *PingArgs) WriteFieldCmd(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PingArgs) TStructName() string {
  return "PingArgs"
}

func (p *PingArgs) ThriftName() string {
  return "ping_args"
}

func (p *PingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PingArgs(%+v)", *p)
}

func (p *PingArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PingArgs)
  if !ok {
    return 0, false
  }
  if p.Cmd != data.Cmd {
    if p.Cmd < data.Cmd {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *PingArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Cmd
  }
  return nil
}

func (p *PingArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("cmd", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type PingResult struct {
  thrift.TStruct
  Success string "success"; // 0
  Ex *CrucException "ex"; // 1
}

func NewPingResult() *PingResult {
  output := &PingResult{
    TStruct:thrift.NewTStruct("ping_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PingResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PingResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v20, err21 := iprot.ReadString()
  if err21 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err21); }
  p.Success = v20
  return err
}

func (p *PingResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PingResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewCrucException()
  err24 := p.Ex.Read(iprot)
  if err24 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExCrucException", err24); }
  return err
}

func (p *PingResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PingResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ping_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PingResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *PingResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PingResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CrucException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *PingResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PingResult) TStructName() string {
  return "PingResult"
}

func (p *PingResult) ThriftName() string {
  return "ping_result"
}

func (p *PingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PingResult(%+v)", *p)
}

func (p *PingResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PingResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PingResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *PingResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - InterfaceName
 *  - Params
 */
type CallArgs struct {
  thrift.TStruct
  InterfaceName string "interfaceName"; // 1
  Params thrift.TList "params"; // 2
}

func NewCallArgs() *CallArgs {
  output := &CallArgs{
    TStruct:thrift.NewTStruct("call_args", []thrift.TField{
    thrift.NewTField("interfaceName", thrift.STRING, 1),
    thrift.NewTField("params", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *CallArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "interfaceName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "params" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CallArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v25, err26 := iprot.ReadString()
  if err26 != nil { return thrift.NewTProtocolExceptionReadField(1, "interfaceName", p.ThriftName(), err26); }
  p.InterfaceName = v25
  return err
}

func (p *CallArgs) ReadFieldInterfaceName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CallArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype32, _size29, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Params", "", err)
  }
  p.Params = thrift.NewTList(_etype32, _size29)
  for _i33:= 0; _i33 < _size29; _i33++ {
    v35, err36 := iprot.ReadString()
    if err36 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem34", "", err36); }
    _elem34 := v35
    p.Params.Push(_elem34)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CallArgs) ReadFieldParams(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CallArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("call_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CallArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("interfaceName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "interfaceName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.InterfaceName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "interfaceName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "interfaceName", p.ThriftName(), err); }
  return err
}

func (p *CallArgs) WriteFieldInterfaceName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CallArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Params != nil {
    err = oprot.WriteFieldBegin("params", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "params", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Params.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter37 := range p.Params.Iter() {
      Iter38 := Iter37.(string)
      err = oprot.WriteString(string(Iter38))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter38", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "params", p.ThriftName(), err); }
  }
  return err
}

func (p *CallArgs) WriteFieldParams(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CallArgs) TStructName() string {
  return "CallArgs"
}

func (p *CallArgs) ThriftName() string {
  return "call_args"
}

func (p *CallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallArgs(%+v)", *p)
}

func (p *CallArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CallArgs)
  if !ok {
    return 0, false
  }
  if p.InterfaceName != data.InterfaceName {
    if p.InterfaceName < data.InterfaceName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Params.CompareTo(data.Params); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CallArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.InterfaceName
  case 2: return p.Params
  }
  return nil
}

func (p *CallArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("interfaceName", thrift.STRING, 1),
    thrift.NewTField("params", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type CallResult struct {
  thrift.TStruct
  Success string "success"; // 0
  Ex *CrucException "ex"; // 1
}

func NewCallResult() *CallResult {
  output := &CallResult{
    TStruct:thrift.NewTStruct("call_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CallResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CallResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v39, err40 := iprot.ReadString()
  if err40 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err40); }
  p.Success = v39
  return err
}

func (p *CallResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CallResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewCrucException()
  err43 := p.Ex.Read(iprot)
  if err43 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExCrucException", err43); }
  return err
}

func (p *CallResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CallResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("call_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CallResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CallResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CallResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CrucException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *CallResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CallResult) TStructName() string {
  return "CallResult"
}

func (p *CallResult) ThriftName() string {
  return "call_result"
}

func (p *CallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallResult(%+v)", *p)
}

func (p *CallResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CallResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CallResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *CallResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}


